<?xml version="1.0" encoding="UTF-8"?>
<modification>
   <id>Add cyclibg price3 feature depending on how many months the cycle is for. Multiply the price for the moths. Create the function that get the cyclibg payment fro the selected product and retinr it as int. </id>
   <version>1.0</version>
   <vqmver>2.X</vqmver>
   <author>Maadix.net - Maddish</author>
   <file name="system/library/cart/cart.php">
       <operation info="Add the function into the file">
           <search position="replace"><![CDATA[
             public function getProducts() {
           ]]></search>
           <add><![CDATA[
            public function getCyclingMonths($cart_id, $product_id){
                switch ($product_id){
                case 50:
                  $option_id= 232;
                  break;
                case 51:
                  $option_id= 233; 
                  break;
                case 52:
                  $option_id = 238;
                  break;
                case 53:
                  $option_id = 241;
                  break;
                default:
                  break;
                }

            $cart_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "cart WHERE api_id = '" . (isset($this->session->data['api_id']) ? (int)$this->session->data['api_id'] : 0) . "' AND customer_id = '" . (int)$this->customer->getId() . "' AND cart_id = '" . (int)$cart_id . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "'");
            if ($cart_query->row['option']){
                $cart_options=$cart_query->row['option'];
                $cart_option=json_decode($cart_options,true);
                $cycling= (isset($cart_option[$option_id]))?$cart_option[$option_id]:'';

                switch ($cycling){
                case 31:
                case 33:
                case 47:
                case 55:
                  $months= 3;
                  break;
                case 32:
                case 34:
                case 48:
                case 56:
                  $months= 12;
                  break;
                default:
                  $months = 1;
                  break;
                }
                return $months;
            }

        }

        public function getProducts() {
           ]]></add>
       </operation>
       <operation info="Multiply total for thye selected monts inc cyclcing payment ">
           <search position="replace"><![CDATA[
              $product_data[] = array(
           ]]></search>
           <add><![CDATA[
              // Get the months
                 $months=$this->getCyclingMonths($cart['cart_id'], $cart['product_id']);

                $product_data[] = array(

           ]]></add>
       </operation>

       <operation info="Multiply total for thye selected monts inc cyclcing payment ">
           <search position="replace"><![CDATA[
            'total'           => ($price + $option_price) * $cart['quantity'],
           ]]></search>
           <add><![CDATA[
            'total'           => ($price + $option_price) * $months,
           ]]></add>
       </operation>

       <operation info="Multiply total for thye selected monts inc cyclcing payment ">
           <search position="replace"><![CDATA[
              $total += $this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $product['quantity'];
           ]]></search>
           <add><![CDATA[
              $months=$this->getCyclingMonths($product['cart_id'], $cart['product_id']);
              $total += $this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $months;
           ]]></add>
       </operation>
   </file>

   <file name="catalog/controller/checkout/cart.php">
       <operation info="Add the function call into the file to get total paying months">
           <search position="replace"><![CDATA[
              $total = $this->currency->format($unit_price * $product['quantity'], $this->session->data['currency']);
           ]]></search>
           <add><![CDATA[
              $months= $this->cart->getCyclingMonths($product['cart_id'],$product['product_id']);
              $total = $this->currency->format($unit_price * $months, $this->session->data['currency']);
           ]]></add>
       </operation>
   </file>
   <file name="catalog/controller/checkout/confirm.php">
       <operation info="Add the function call into the file to get total paying months">
           <search position="replace"><![CDATA[
                $data['products'][] = array(
           ]]></search>
           <add><![CDATA[
                $months= $this->cart->getCyclingMonths($product['cart_id'], $product['product_id']);

                $data['products'][] = array(
           ]]></add>
       </operation>
       <operation info="Multiply total for cycling months for the total">
           <search position="replace"><![CDATA[
                'total' => $this->currency->format($this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $product['quantity'], $this->session->data['currency']),
           ]]></search>
           <add><![CDATA[
                'total'      => $this->currency->format($this->tax->calculate($product['price'], $product['tax_class_id'], $this->config->get('config_tax')) * $months, $this->session->data['currency']),

           ]]></add>
       </operation>
      </file>
     <file name="catalog/controller/common/cart.php">
       <operation info="Multiply total for cycling months for the total">
           <search position="replace"><![CDATA[
            $total = $this->currency->format($unit_price * $product['quantity'], $this->session->data['currency']);
           ]]></search>
           <add><![CDATA[
            $months= $this->cart->getCyclingMonths($product['cart_id'], $product['product_id']);
            $total = $this->currency->format($unit_price * $months, $this->session->data['currency']);
           ]]></add>
       </operation>

   </file>
     <file name="catalog/controller/extension/payment/pp_standard.php">
       <operation info="Multiply total for cycling months for the total">
           <search position="replace"><![CDATA[
              'price'    => $this->currency->format($product['price'], $order_info['currency_code'], false, false),
           ]]></search>
           <add><![CDATA[
              'price'    => $this->currency->format($product['total'], $order_info['currency_code'], false, false),
           ]]></add>
       </operation>
       <operation info="Add other insert into database">
           <search position="replace"><![CDATA[
              $this->model_checkout_order->addOrderHistory($order_id, $order_status_id);
           ]]></search>
           <add><![CDATA[
              $this->model_checkout_order->addOrderHistory($order_id, $order_status_id);
              $data['total']=$order_info['total'];
              $data['customer_id']=$order_info['customer_id'];
              $data['order_id']=$order_id;
              $data ['date_added'] = $data ['date_expire'] = $data['date_payed'] = date ("Y-m-d");
              $data['txnid'] = $this->request->post['txn_id'];
              $data['invoice'] = $this->request->post['invoice'];
                // AAd only on confirmed payment
              if ($order_status_id==$this->config->get('pp_standard_completed_status_id')){
                $data['status_id']='2';
              //get all products id in order
                    $this->load->model('account/order');
                    $this->load->model('checkout/invoices');
                    $products = $this->model_account_order->getOrderProducts($order_id);

                    foreach ($products as $product){
                      $product_id = $product['product_id'];
              //$orderproducts_arr=$this->db->query("SELECT DISTINCT product_id  FROM `" . DB_PREFIX . "order_product`  WHERE order_id = '" .$order_id . "'");
              //$orderproducts=$orderproducts_arr->row;
    
                      //add new vm into table                               
                    $new_vmid=$this->model_checkout_invoices->addVm($data,$product_id);

                //Add cycling payment. Add one for each vm that has been created as cycling paymente can be different
                    $this->model_checkout_invoices->addCyclingPayment($data, $new_vmid,$product_id);
                    $months = $this->model_checkout_invoices->getMonthsPayed($order_id);
                    $countmonths= date ("Y-m-d", strtotime(" +" .$months . " months"));
                    $data ['Factperiod'] =$data ['date_added'] . " - " .  $countmonths;

    
                // Create invoice
                // for all payments add an invoice

                    $this->model_checkout_invoices->addInvoice($data,$product_id, $iscron='no');
                }
              }

           ]]></add>
       </operation>
   </file>

   <file name="catalog/controller/account/account.php">
       <operation info="add link to invoices list in account page">
           <search position="replace"><![CDATA[
             $data['header'] = $this->load->controller('common/header');
           ]]></search>
           <add><![CDATA[
              $data['header'] = $this->load->controller('common/header');
              $data['invoices'] = $this->url->link('account/invoices', '', true);
           ]]></add>
       </operation>
  </file>

     <file name="catalog/controller/extension/module/account.php">
       <operation info="add link to invoices list in account page">
           <search position="replace"><![CDATA[
              $data['recurring'] = $this->url->link('account/recurring', '', true);
           ]]></search>
           <add><![CDATA[
              $data['recurring'] = $this->url->link('account/recurring', '', true);
              $data['invoices'] = $this->url->link('account/invoices', '', true);
           ]]></add>
       </operation>
  </file>
     <file name="catalog/language/es-es/account/account.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              $_['text_transactions']  = 'Transactiones';
           ]]></search>
           <add><![CDATA[
              $_['text_transactions']  = 'Transactiones';
              $_['text_invoices']  = 'Facturas';
           ]]></add>
       </operation>
  </file>
     <file name="catalog/language/en-gb/account/account.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              $_['text_transactions']  = 'Transactions';
           ]]></search>
           <add><![CDATA[
              $_['text_transactions']  = 'Transactions';
              $_['text_invoices']  = 'Invoices';
           ]]></add>
       </operation>
  </file>

     <file name="catalog/controller/account/account.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              $data['text_recurring'] = $this->language->get('text_recurring');
           ]]></search>
           <add><![CDATA[
              $data['text_recurring'] = $this->language->get('text_recurring');
              $data['text_invoices'] = $this->language->get('text_invoices');
           ]]></add>
       </operation>
  </file>
     <file name="catalog/language/en-gb/extension/module/account.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              $_['text_recurring']   = 'Recurring payments';
           ]]></search>
           <add><![CDATA[
              $_['text_recurring']   = 'Recurring payments';
              $_['text_invoices']  = 'Invoices';
           ]]></add>
       </operation>
  </file>
     <file name="catalog/controller/extension/module/account.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              $data['text_recurring'] = $this->language->get('text_recurring');
           ]]></search>
           <add><![CDATA[
              $data['text_recurring'] = $this->language->get('text_recurring');
              $data['text_invoices'] = $this->language->get('text_invoices');
           ]]></add>
       </operation>
  </file>

     <file name="catalog/controller/api/order.php">
       <operation info="Create vm, invoice and cycling paymente is an order is manually set to processing from the admin via api">
           <search position="replace"><![CDATA[
              $this->model_checkout_order->addOrderHistory($order_id, $order_status_id, $this->request->post['comment']);
           ]]></search>
           <add><![CDATA[
              $this->model_checkout_order->addOrderHistory($order_id, $order_status_id, $this->request->post['comment']);
                                        /*
                                         * maddish
                                         * check chsnges in order status:
                                         * From 0 to pending:  do nothing ...It could be a bank transfer
                                         * From pendig to Processing: means that a payment has been done.
                                         * Do the followin:
                                         *
                                         * - Crete Virtual Machine instance
                                         * - Create Cycling payment (customer plan)
                                         * - Create invoice with cron=no for this order
                                         *  
                                         */
                                        //$current_order_status=
                                        // Set the order history
                                        if (isset($this->request->post['order_status_id'])) {
                                                $order_status_id = $this->request->post['order_status_id'];
                                        } else {
                                                $order_status_id = $this->config->get('config_order_status_id');
                                        }
                                        #####changes starts here
                                        $previous_order_status = $order_info['order_status_id'];
                                        $order_data['order_id'] = $order_id;
                                        if ($order_status_id == 2  && $previous_order_status == 1) {
                                          //new status is processing and old status was pending  
                                            $this->load->model('account/order');
                                            $this->load->model('checkout/invoices');
                                            $products = $this->model_account_order->getOrderProducts($order_id);
                                            $invoice_data=array();
                                            $order_data['txnid'] = '';
                                            $order_data['status_id']=2;
                                            foreach ($order_data['products'] as $product){
                                                  $product_id = $product['product_id'];
                                                  //Create VM instance
                                                  $new_vmid=$this->model_checkout_invoices->addVm($order_data,$product_id);
                                                  $this->model_checkout_invoices->addCyclingPayment($order_data, $new_vmid,$product_id);
                                                  //Change this function with the values get from previuos foreach
                                                  $months = $this->model_checkout_invoices->getMonthsPayed($order_id);
                                                  $order_data['date_payed'] = $order_data['date_added'] = $order_data['date_expire']= date ("Y-m-d");
                                                  $countmonths= date ("Y-m-d", strtotime(" +" .$months . " months"));
                                                  $order_data ['Factperiod'] =$order_data ['date_payed'] . " - " .  $countmonths;

                                                  $this->model_checkout_invoices->addInvoice($order_data,$product_id, $iscron='no');

                                            }

                                        }

           ]]></add>
       </operation>
  </file>
     <file name="admin/language/en-gb/common/column_left.php">
       <operation info="add strings for invoices in menu">
           <search position="replace"><![CDATA[
              $_['text_other_status']              = 'Other Statuses';
           ]]></search>
           <add><![CDATA[
              $_['text_other_status']              = 'Other Statuses';
              $_['text_invoices']              = 'Invoices';
           ]]></add>
       </operation>
  </file>

     <file name="admin/controller/common/column_left.php">
       <operation info="add strings for invoices">
           <search position="replace"><![CDATA[
              if ($this->user->hasPermission('access', 'sale/recurring')) {
           ]]></search>
           <add><![CDATA[
              if ($this->user->hasPermission('access', 'sale/invoice')) {
                        $sale[] = array(
                            'name'     => $this->language->get('text_invoices'),
                            'href'     => $this->url->link('sale/invoice', 'token=' . $this->session->data['token'], true),
                            'children' => array()
                        );
                }

              if ($this->user->hasPermission('access', 'sale/recurring')) {
           ]]></add>
       </operation>
  </file>

</modification>
